# encoding: utf-8
class ApplicationController < ActionController::Base
  before_filter :copy_current_user
  
  ## Authenticate RPC-calls from localhost
  private
  def authenticate_localhost
    logger.error "authenticate_localhost for #{request.remote_ip}"
    if (request.remote_ip == "127.0.0.1" || request.remote_ip == "::1")
       udpate_current_user(request.remote_ip, Role.localhost.id)
       return true
    end
    return false
  end
  
  
  #Authenticate for Node-based-Request:
  #User: Mac of wlan module
  #Password: Mac of first wired nic (eg eth0)
  def authenticate_mac
    authenticate_or_request_with_http_basic do |username, password|
        logger.error "Node login: #{username} #{password}"
        # Node-ids consist of 12 hexadecimal chars (mac-address of node)
        # In order to prevent shell-code injection, all submitted data is checked by a regular expression
        # See: node_status.rake
        session[:wlan_mac] = username
        session[:bat0_mac] = password
        udpate_current_user(username,Role.node.id)
        username.match(/^[0-9a-f]{12}$/i) && password.match(/^[0-9a-f]{12}$/i)
      end
  end
  

  ## Create user-obejcts not generated by devise
  def udpate_current_user(email, role_id)
    u = User.new
    u.role_id = role_id
    u.email = email
    Authorization.current_user = u
    current_user = u
  end
  
  ## Copy device user (current_user) to Authorization.current_user for model based authorisation.
  def copy_current_user
    Authorization.current_user = current_user if defined? authenticate
  end
  
end

